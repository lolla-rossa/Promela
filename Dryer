#define timeoutHeater 10
#define numberOfProcess 3

mtype:states = {on, off};
mtype:process = {procTimer, procHeater, procImitator};	
mtype:statesHeater = {Waiting, Drying};
mtype:states = {Start, Stop};
mtype:states state[numberOfProcess];

mtype:statesHeater stateHeater = Waiting;
mtype:process currentProc = procImitator;
mtype:states I_OBJECT = off, O_FAN_HEATER = off;
	
byte timerImitator = 0, timerHeater = 0, timerTimer = 0, i = 0;

active proctype Init() {
	atomic {
	for (i : 1 .. numberOfProcess){
		state[i-1] = Start;
	}
	run Imitator();
	run Heater();
	run Timer();}
}

proctype Imitator() provided (currentProc == procImitator){
	do
	::atomic {
			if
			::(true) -> I_OBJECT = on;
			::(true) -> I_OBJECT = off;
			fi;
			i = procImitator-1;
			do::
				i = (i+1)%numberOfProcess;
				if
				::(state[i] == Start) -> break;
				::else -> skip;
				fi;
			od; 
			currentProc = i+1;}
	od; 		
}

proctype Heater() provided (currentProc == procHeater) {
	do
	::atomic{
		if
		::(stateHeater == Waiting) -> {
			if 
			::(I_OBJECT == on) -> O_FAN_HEATER = on; stateHeater = Drying;
			::else -> O_FAN_HEATER = off; 
			fi; }
		::(stateHeater == Drying) -> state[procHeater-1] = Stop; state[procTimer-1] = Start;
		fi;
		i = procHeater-1;
		do::
			i = (i+1)%numberOfProcess;
			if
			::(state[i] == Start) -> break;
			::else -> skip;
			fi;
		od;
		currentProc = i+1;
	}
	od;
}

proctype Timer() provided (currentProc == procTimer) {
	do
	::atomic {
		timerTimer++;
		if
			::(I_OBJECT == on) -> timerTimer = 0; 
			::(timerTimer >= timeoutHeater) -> timerTimer = 0; state[procHeater-1] = Start; state[procTimer-1] = Stop; stateHeater = Waiting;
			::else -> skip;
		fi;
		i = procTimer-1;
		do::
			i = (i+1)%numberOfProcess;
			if
			::(state[i] == Start) -> break;
			::else -> skip;
			fi;
		od;
		currentProc = i+1;
	}
	od;
}

ltl f1 {[](((I_OBJECT == off)&&(O_FAN_HEATER == off)) -> X(O_FAN_HEATER == off))}
ltl f2 {[](((I_OBJECT == on)&&(O_FAN_HEATER == on)) -> X(O_FAN_HEATER == on))}
ltl f3 {[]((I_OBJECT == on) -> X(O_FAN_HEATER == on))}
ltl f4 {[](((timerHeater >= 10)&&(I_OBJECT == off)) -> ((O_FAN_HEATER == off) U (I_OBJECT == off)))}
ltl f5 {[]((timerHeater >= 10)-> X(((I_OBJECT == off)->(O_FAN_HEATER == off))||((I_OBJECT == on)->(O_FAN_HEATER == on))))}
ltl f6 {[]((timerHeater >= 10) -> X(stateHeater == Waiting))}
ltl f7 {[]((timerHeater >= 10) -> X(timerHeater == 0))}
ltl f8 {[]((stateHeater == Drying)->X(currentProc == procTimer))}
