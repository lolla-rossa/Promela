#define imitatorMax 150
#define timeoutHeater 10

mtype:states = {on, off};
mtype:states I_OBJECT = off, O_FAN_HEATER = off;
mtype:process = {procImitator, procHeater};
mtype:process currentProc = procImitator;	


mtype:statesImitator = {Init, Off, On};
mtype:statesImitator stateImitator; 
mtype:statesHeater = {Waiting, Drying};
mtype:statesHeater stateHeater;


byte imitatorCounter = 0, timerImitator = 0, timerHeater = 0;

active proctype Imitator() provided (currentProc == procImitator){
	/*loop:
		atomic {
			currentProc = procHeater;		
			if
			::(true) -> I_OBJECT = on;
			::(true) -> I_OBJECT = off;
			fi;
		 	goto loop; 
			} */ 		
	 initImitator:
	  	atomic {
	  	currentProc = procHeater;
	  	stateImitator = Init;
	  	I_OBJECT = on;
	  	imitatorCounter = 1;
	  	goto offImitator;}
	 offImitator:
	 	atomic {
	 	currentProc = procHeater;
	 	stateImitator = Off;
	 	timerImitator++; 
	 	I_OBJECT = off; 
	 	if
	 	::(timerImitator >= imitatorCounter) -> timerImitator = 0; imitatorCounter++; goto onImitator;
	 	::else -> goto offImitator;
	 	fi;}	 		
	 onImitator:
	  	atomic{
	  	currentProc = procHeater; 
	  	stateImitator = On;
	  	timerImitator++;
	  	I_OBJECT = on;
	  	if
	  	::(imitatorCounter >= imitatorMax) -> goto initImitator;
	  	::(timerImitator >= imitatorCounter) -> timerImitator=0; goto offImitator;
	  	::else -> goto onImitator;
	  	fi;}  	
}

active proctype Heater() provided (currentProc == procHeater) {
	waiting:
		atomic{
		currentProc = procImitator;
		stateHeater = Waiting;
		if 
		::(I_OBJECT == on) -> O_FAN_HEATER = on; goto drying;
		::else -> O_FAN_HEATER = off; goto waiting;
		fi;}	
	drying:
		atomic{
		currentProc = procImitator;
		stateHeater = Drying;
		timerHeater++;
		if
		::(I_OBJECT == on) -> timerHeater = 0;
		::(timerHeater >= timeoutHeater) -> timerHeater = 0; goto waiting;
		::else -> goto drying;
		fi;}
}

ltl f1 {[](((I_OBJECT == off)&&(O_FAN_HEATER == off)) -> X(O_FAN_HEATER == off))}
ltl f2 {[](((I_OBJECT == on)&&(O_FAN_HEATER == on)) -> X(O_FAN_HEATER == on))}
ltl f3 {[]((I_OBJECT == on) -> X((currentProc == procHeater) U (O_FAN_HEATER == on)))}
ltl f4 {[](((timerHeater >= 10)&&(I_OBJECT == off)) -> ((O_FAN_HEATER == off) U (I_OBJECT == off)))}
ltl f5 {[]((timerHeater >= 10)-> X(((I_OBJECT == off)->(O_FAN_HEATER == off))||((I_OBJECT == on)->(O_FAN_HEATER == on))))}
ltl f6 {[]((timerHeater >= 10) -> X(stateHeater == Waiting))}
ltl f7 {[]((timerHeater >= 10) -> X(timerHeater == 0))}
ltl f8 {[]((imitatorCounter >= imitatorMax) -> X((imitatorCounter == 1)))}
ltl f9 {[]((timerImitator >= imitatorCounter) -> X(timerImitator == 0))}
